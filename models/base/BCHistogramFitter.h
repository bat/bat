#ifndef __BCMODELHISTOGRAMFITTER__H
#define __BCMODELHISTOGRAMFITTER__H

/**
 * @class BCHistogramFitter
 * @brief A class for fitting histograms with functions
 * @author Daniel Kollar
 * @author Kevin Kr&ouml;ninger
 * @version 1.0
 * @date 11.2008
 * @details This class allows fitting of a TH1D histogram using
 * a TF1 function.
 */

/*
 * Copyright (C) 2007-2015, the BAT core developer team
 * All rights reserved.
 *
 * For the licensing terms see doc/COPYING.
 * For documentation see http://mpp.mpg.de/bat
 */

// ---------------------------------------------------------

#include "BCFitter.h"

#include <string>
#include <vector>

// ---------------------------------------------------------

class BCHistogramFitter : public BCFitter
{
public:

    /** \name Constructors and destructors */
    /* @{ */
    /**
     * Constructor
     * @param hist Histogram with observed number of counts.
                   Conceptually, each entry is an integer. But we don't restrict
                   to the integer data type because one might have
                   a number of entries larger than 2^32.
     * @param func fit function
     * @param name name of the model */
    BCHistogramFitter(const TH1& hist, const TF1& func, const std::string& name = "histogram_fitter_model");

    /**
     * The default destructor. */
    virtual ~BCHistogramFitter();

    /* @} */

    /** \name Member functions (get) */
    /* @{ */

    /**
     * @return The data histogram */
    const TH1& GetHistogram()
    { return fHistogram; };

    /**
     * @return p Value accounting for degrees of freedom */
    double GetPValueNDoF()
    { return fPValueNDoF; }

    /* @} */

    /** \name Member functions (miscellaneous methods) */
    /* @{ */

    /**
     * The log of the conditional probability. Overloaded from BCModel.
     * @param parameters A vector of doubles containing the parameter values. */
    virtual double LogLikelihood(const std::vector<double>& parameters);

    /**
     * Performs the fit.
     * @return Success of action. */
    virtual void Fit();

    /**
     * Draw the fit in the current pad. */
    void DrawFit(const std::string& options = "HIST", bool flaglegend = false);

    /**
     * Calculate the p-value using fast-MCMC and the likelihood as test statistic. The method is explained in the appendix of
     * http://arxiv.org/abs/1011.1674
     * @param par The parameter values for which expectations are computed
     * @param nIterations number of pseudo experiments generated by the Markov chain
     * @return Success of action. */
    bool CalculatePValueFast(const std::vector<double>& par, unsigned nIterations = 100000);

    /**
     * Calculate the p-value using approximate chi^2 distribution of scaled likelihood.
     * Approximation is valid for bin contents >5, see eq. (32.12),
     * PDG: Statistics, Monte Carlo, Group Theory. Physics Letters B 667, 316-339(2008).
     * @param par The set of parameter values used in the model, usually the best fit parameters
     * @return Success of action. */
    bool CalculatePValueLikelihood(const std::vector<double>& par);

    /**
     * Calculate the p-value using approximate chi^2 distribution of squared difference
     * for conventional weights.
     * Approximation is valid for bin contents >5 and not as as good for little data as
     * CalculatePValueLikelihood, see eq. (32.13),
     * PDG: Statistics, Monte Carlo, Group Theory. Physics Letters B 667, 316-339(2008).
     * @param par The set of parameter values used in the model, usually the best fit parameters
     * @param weight use the variance from the expected #counts (true) or the measured counts (false)
     * @return Success of action. */
    bool CalculatePValueLeastSquares(const std::vector<double>& par, bool weightExpect = true);
    /* @} */

protected:

    /**
     * The histogram with observed number of counts. */
    TH1D fHistogram;

    /**
     * fPValue accounting for degrees of freedom. */
    double fPValueNDoF;
};

// ---------------------------------------------------------

#endif
